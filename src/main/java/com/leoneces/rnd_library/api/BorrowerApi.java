/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leoneces.rnd_library.api;

import com.leoneces.rnd_library.model.Book;
import com.leoneces.rnd_library.model.Borrower;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-28T20:35:55.083763+01:00[Europe/Dublin]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Borrower Endpoints", description = "the Borrower Endpoints API")
public interface BorrowerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /borrower
     * Register a new borrower.
     *
     * @param borrower  (optional)
     * @return Record Successfully Added (status code 201)
     *         or Conflict (Book already borrowed) (status code 409)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "addBorrower",
        description = "Register a new borrower.",
        tags = { "Borrower Endpoints" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Record Successfully Added"),
            @ApiResponse(responseCode = "409", description = "Conflict (Book already borrowed)"),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/borrower",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addBorrower(
        @Parameter(name = "Borrower", description = "") @Valid @RequestBody(required = false) Borrower borrower
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /borrower/{id}/borrowed_books
     * Retrieve the list of books borrowed by a specific borrower.
     *
     * @param id  (required)
     * @return Success Response (status code 200)
     *         or Borrower not found (status code 404)
     */
    @Operation(
        operationId = "getBorrowedBooksByBorrowerId",
        description = "Retrieve the list of books borrowed by a specific borrower.",
        tags = { "Borrower Endpoints" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success Response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Book.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Borrower not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/borrower/{id}/borrowed_books",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Book>> getBorrowedBooksByBorrowerId(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"BookID\" : \"018b2f19-e79e-7d6a-a56d-29feb6211b04\", \"BorrowedBy\" : { \"BorrowerID\" : \"7d978e18-9b82-4908-b7a9-5dd2dd7b349e\", \"Phone\" : \"+353 1 677 0095\", \"Name\" : \"Michael Daniel Higgins\" }, \"Title\" : \"Ulysses\", \"Author\" : { \"AuthorID\" : \"257f4259-9e90-4f29-871d-eea3a4386da2\", \"Title\" : \"James Augustine Aloysius Joyce\", \"Country\" : \"Ireland\" }, \"PublicationYear\" : 1922 }, { \"BookID\" : \"018b2f19-e79e-7d6a-a56d-29feb6211b04\", \"BorrowedBy\" : { \"BorrowerID\" : \"7d978e18-9b82-4908-b7a9-5dd2dd7b349e\", \"Phone\" : \"+353 1 677 0095\", \"Name\" : \"Michael Daniel Higgins\" }, \"Title\" : \"Ulysses\", \"Author\" : { \"AuthorID\" : \"257f4259-9e90-4f29-871d-eea3a4386da2\", \"Title\" : \"James Augustine Aloysius Joyce\", \"Country\" : \"Ireland\" }, \"PublicationYear\" : 1922 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /borrower/{id}
     * Retrieve details of a specific borrower.
     *
     * @param id  (required)
     * @return Success Response (status code 200)
     *         or Borrower not found (status code 404)
     */
    @Operation(
        operationId = "getBorrowerById",
        description = "Retrieve details of a specific borrower.",
        tags = { "Borrower Endpoints" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Borrower.class))
            }),
            @ApiResponse(responseCode = "404", description = "Borrower not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/borrower/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Borrower> getBorrowerById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"BorrowerID\" : \"7d978e18-9b82-4908-b7a9-5dd2dd7b349e\", \"Phone\" : \"+353 1 677 0095\", \"Name\" : \"Michael Daniel Higgins\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
